(* SM + RpV-SUSY UDD Interaction                                                               *)
(*      Based on the Standard Model file in FeynRules6, written by N. Christensen and C. Duhr. *)


If[Or[Not[ValueQ[M$ModelName]], M$ModelName != "Standard Model"], Print["[ERROR] Standard Model must be loaded."]; Abort[]]

M$ModelName = "SM_plus_UDD";

M$Information = {Authors      -> "Sho Iwamoto",
                 Version      -> "0.1",
                 Date         -> "Apr, 5. 2011",
                 Institutions -> "The University of Tokyo",
                 Emails       -> "iwamoto@hep-th.phys.s.u-tokyo.ac.jp"
                };

(*****************************************************************************************)

IndexRange[Index[SCA]] = Range[6]; IndexStyle[SCA, i];

(*****************************************************************************************)

M$Parameters = {
  Msq    == {
        ParameterType -> External,
        TeX           -> Subscript["M","sq"],
        Value         -> 200,
        Description   -> "Squark mass in GeV"},
  Wsq    == {
        ParameterType -> External,
        TeX           -> Subscript["W","sq"],
        Value         -> 0,
        Description   -> "Squark width in GeV"},
  UDD312 == {
        ParameterType -> External,
        InteractionOrder -> {QED, 1},
        TeX -> Subsuperscript["\[Lambda]", "312", "\[DoublePrime]"],
        Value -> 1.0,
        Description -> "RpV-UDD312 coupling constant" },
  UDD313 == {
        ParameterType -> External,
        InteractionOrder -> {QED, 1},
        TeX -> Subsuperscript["\[Lambda]", "313", "\[DoublePrime]"],
        Value -> 1.0,
        Description -> "RpV-UDD313 coupling constant" }
}

(*****************************************************************************************)

M$ClassesDescription = {
  S[4] == {
        ClassName        -> su,
        SelfConjugate    -> False,
        Indices          -> {Index[SCA], Index[Colour]},
        FlavorIndex      -> SCA,
        QuantumNumbers   -> { Q -> 2/3 },
        PDG              ->        { 1000002  ,  1000004  ,  1000006  ,  2000002  ,  2000004  ,  2000006   },
        ParticleName     ->        { "suL"    ,  "scL"    ,  "stL"    ,  "suR"    ,  "scR"    ,  "stR"     },
        AntiParticleName ->        { "suL~"   ,  "scL~"   ,  "stL~"   ,  "suR~"   ,  "scR~"   ,  "stR~"    },
        ClassMembers     ->        {  suL     ,   scL     ,   stL     ,   suR     ,   scR     ,   stR      },
        Mass             -> { Msu,  {MsuL,Msq}, {MscL,Msq}, {MstL,Msq}, {MsuR,Msq}, {MscR,Msq}, {MstR,Msq} },
        Width            -> { Wsu,  {WsuL,Wsq}, {WscL,Wsq}, {WstL,Wsq}, {WsuR,Wsq}, {WscR,Wsq}, {WstR,Wsq} },
        PropagatorLabel  -> { "su",  "suL"    ,  "scL"    ,  "stL"    ,  "suR"    ,  "scR"    ,  "stR"     },
        FullName         -> { "u-squark-left", "c-squark-left", "t-squark-left", "u-squark-right", "c-squark-right", "t-squark-right"},
        PropagatorType   -> ScalarDash,
        PropagatorArrow  -> Forward
       },
  S[5] == {
        ClassName        -> sd,
        SelfConjugate    -> False,
        Indices          -> {Index[SCA], Index[Colour]},
        FlavorIndex      -> SCA,
        QuantumNumbers   -> { Q -> -1/3 },
        PDG              ->        { 1000001, 1000003, 1000005, 2000001, 2000003, 2000005 },
        ParticleName     ->        { "sdL"  , "ssL"  , "sbL"  , "sdR"  , "ssR"  , "sbR"   },
        AntiParticleName ->        { "sdL~" , "ssL~" , "sbL~" , "sdR~" , "ssR~" , "sbR~"  },
        ClassMembers     ->        {  sdL   ,  ssL   ,  sbL   ,  sdR   ,  ssR   ,  sbR    },
        Mass             -> { Msd ,  {MsdL,Msq}   , {MssL,Msq}   , {MsbL,Msq}   , {MsdR,Msq}   , {MssR,Msq}   , {MsbR,Msq}    },
        Width            -> { Wsd ,  {WsdL,Wsq}   , {WssL,Wsq}   , {WsbL,Wsq}   , {WsdR,Wsq}   , {WssR,Wsq}   , {WsbR,Wsq}    },
        PropagatorLabel  -> { "sd",  "sdL"  , "ssL"  , "sbL"  , "sdR"  , "ssR"  , "sbR"   },
        FullName         -> { "d-squark-left", "s-squark-left", "b-squark-left", "d-squark-right", "s-squark-right", "b-squark-right"},
        PropagatorType   -> ScalarDash,
        PropagatorArrow  -> Forward
       }
}

(*****************************************************************************************)

LRPV := Module[{udd, uddCC, r,c, c1,c2,gen,glu, c3,sp,i,j,k},
         (*** UDD Terms Definition ***)
         udd[i_,j_,k_]   := Eps[c1,c2,c3]( HC[su[i+3, c1]] CC[dqbar[sp, k, c3]].right[  dq[sp, j, c2]]
                                         + HC[sd[j+3, c2]] CC[dqbar[sp, k, c3]].right[  uq[sp, i, c1]]
                                         + HC[sd[k+3, c3]] CC[uqbar[sp, i, c1]].right[  dq[sp, j, c2]]);
         uddCC[i_,j_,k_] := Eps[c1,c2,c3](    su[i+3, c1]     dqbar[sp, k, c3] .left[CC[dq[sp, j, c2]]]
                                            + sd[j+3, c2]     dqbar[sp, k, c3] .left[CC[uq[sp, i, c1]]]
                                            + sd[k+3, c3]     uqbar[sp, i, c1] .left[CC[dq[sp, j, c2]]]);
         (*** The Lagrangian ***)
           del[HC[su[r,c]],mu].del[su[r,c],mu] - Msu[r]^2 HC[su[r,c]].su[r,c]
         + del[HC[sd[r,c]],mu].del[sd[r,c],mu] - Msd[r]^2 HC[sd[r,c]].sd[r,c]
         + I gs (del[subar[gen, c2], mu] G[mu, glu] su[gen, c1]    T[glu, c1, c2]
               - del[su[gen, c1],    mu] G[mu, glu] subar[gen, c2] T[glu, c1, c2] )
         + I gs (del[sdbar[gen, c2], mu] G[mu, glu] sd[gen, c1]    T[glu, c1, c2]
               - del[sd[gen, c1],    mu] G[mu, glu] sdbar[gen, c2] T[glu, c1, c2] )
         - UDD312 udd[3,1,2] - Conjugate[UDD312] uddCC[3,1,2]
         - UDD313 udd[3,1,3] - Conjugate[UDD313] uddCC[3,1,3]
];
